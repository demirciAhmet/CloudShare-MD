name: Node.js CI and Docker Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Add this permissions block
permissions:
  contents: read   # Default, good for checkout
  packages: write  # Required to push to GHCR

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests (with mock DB)
        run: npm test

  build_smoke_and_push_docker_image:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    # You could also set permissions at the job level if preferred,
    # but workflow level is often cleaner if multiple jobs need it.
    # permissions:
    #   contents: read
    #   packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          tags: |
            type=sha,prefix=
            latest

      - name: Build Docker image locally
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create docker-compose.smoke-test.yml
        run: |
          cat <<EOF > docker-compose.smoke-test.yml
          services:
            app:
              image: $(echo "${{ steps.meta.outputs.tags }}" | head -n 1) # Use the first tag
              container_name: cloudshare-smoke-app
              environment:
                - NODE_ENV=production
                - PORT=5002
                - POSTGRES_USER=smoke_user
                - POSTGRES_PASSWORD=smoke_password
                - POSTGRES_DB=smoke_db
                - DATABASE_URL=postgresql://smoke_user:smoke_password@db-smoke:5432/smoke_db?schema=public
              ports:
                - "5002:5002"
              depends_on:
                db-smoke:
                  condition: service_healthy
            db-smoke:
              image: postgres:16-alpine
              container_name: postgres-smoke-db
              environment:
                - POSTGRES_USER=smoke_user
                - POSTGRES_PASSWORD=smoke_password
                - POSTGRES_DB=smoke_db
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U \$${POSTGRES_USER} -d \$${POSTGRES_DB}"]
                interval: 5s
                timeout: 5s
                retries: 5
              restart: always
          EOF

      - name: Run smoke tests
        run: |
          echo "Starting services for smoke test..."
          docker compose -f docker-compose.smoke-test.yml up -d --wait 
          echo "Waiting a bit for app to fully initialize after health check..."
          sleep 5 # Give a few seconds for the app to be fully responsive
          echo "Checking health endpoint..."
          curl --retry 5 --retry-delay 3 --retry-connrefused -sf http://localhost:5002/health
          echo "Smoke test passed!"

      - name: Clean up smoke test environment
        if: always()
        run: |
          docker compose -f docker-compose.smoke-test.yml logs # Log output before down
          docker compose -f docker-compose.smoke-test.yml down -v
          rm docker-compose.smoke-test.yml

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max